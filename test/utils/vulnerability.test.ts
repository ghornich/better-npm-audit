import sinon from 'sinon';
import { expect } from 'chai';
import { mapLevelToNumber, processAuditJson, processExceptions, getExceptionsIds } from '../../src/utils/vulnerability';

import NSPRC from '../__mocks__/nsprc.json';
import EXCEPTION_TABLE_DATA from '../__mocks__/exception-table-data.json';
import V6_SECURITY_REPORT_TABLE_DATA from '../__mocks__/v6-security-report-table-data.json';
import V6_JSON_BUFFER from '../__mocks__/v6-json-buffer.json';
import V6_JSON_BUFFER_EMPTY from '../__mocks__/v6-json-buffer-empty.json';
import V7_SECURITY_REPORT_TABLE_DATA from '../__mocks__/v7-security-report-table-data.json';
import V7_JSON_BUFFER from '../__mocks__/v7-json-buffer.json';
import V7_JSON_BUFFER_EMPTY from '../__mocks__/v7-json-buffer-empty.json';

describe('Vulnerability utils', () => {
  describe('#mapLevelToNumber', () => {
    it('should be able to map audit level to correct numbers', () => {
      expect(mapLevelToNumber('info')).to.equal(0);
      expect(mapLevelToNumber('low')).to.equal(1);
      expect(mapLevelToNumber('moderate')).to.equal(2);
      expect(mapLevelToNumber('high')).to.equal(3);
      expect(mapLevelToNumber('critical')).to.equal(4);
    });
  });

  describe('#getExceptionsIds', () => {
    it('should display the vulnerabilities from command line if .nsprc file not given', () => {
      const consoleStub = sinon.stub(console, 'info');
      const cmdExceptions = [1165, 1890];
      expect(consoleStub.called).to.equal(false);
      const result = getExceptionsIds(false, cmdExceptions);
      expect(result).to.have.length(2).and.deep.equal([1165, 1890]);
      expect(consoleStub.called).to.equal(true);
      expect(consoleStub.calledWith('Exception IDs: 1165, 1890')).to.equal(true);
      consoleStub.restore();
    });

    it('should combine the exceptions from command line and .nsprc file', () => {
      const consoleStub = sinon.stub(console, 'info');
      const cmdExceptions = [1165, 1890];
      expect(consoleStub.called).to.equal(false);
      const result = getExceptionsIds(NSPRC, cmdExceptions);
      expect(result).to.have.length(7).and.deep.equal([1165, 1890, 985, 1213, 2000, 2001, 2100]);
      expect(consoleStub.called).to.equal(true); // Print security report
      consoleStub.restore();
    });
  });

  describe('#processExceptions', () => {
    it('should be able to process exceptions correctly', () => {
      const cmdExceptions = [1165, 1890];
      const result = processExceptions(NSPRC, cmdExceptions);

      expect(result).to.have.property('exceptionIds');
      expect(result.exceptionIds).to.have.length(7).and.to.deep.equal([1165, 1890, 985, 1213, 2000, 2001, 2100]);
      expect(result).to.have.property('report');
      expect(result.report).to.have.length(15).and.to.deep.equal(EXCEPTION_TABLE_DATA);
    });

    it('should be able to filter active exceptions and label correctly', () => {
      const result = processExceptions(NSPRC);
      expect(result).to.have.property('exceptionIds').and.to.have.length(5);
      expect(result).to.have.property('report');

      const activeExceptionIds = result.report
        .filter((exception: string[]) => exception[1] === '\u001b[32mactive\u001b[0m')
        .map((each: (string | number)[]) => Number(each[0]));
      expect(activeExceptionIds).to.have.length(5).to.deep.equal([985, 1213, 2000, 2001, 2100]);
    });

    it('should be able to filter inactive exceptions and label correctly', () => {
      const result = processExceptions(NSPRC);
      expect(result).to.have.property('exceptionIds').and.to.have.length(5);
      expect(result).to.have.property('report');

      const activeExceptionIds = result.report
        .filter((exception: string[]) => exception[1] === '\u001b[33minactive\u001b[0m')
        .map((each: (string | number)[]) => Number(each[0]));
      expect(activeExceptionIds).to.have.length(1).to.deep.equal([976]);
    });

    it('should be able to filter expired exceptions and label correctly', () => {
      const dateStub = sinon.stub(Date, 'now').returns(new Date(Date.UTC(2021, 6, 1)).valueOf());
      const result = processExceptions(NSPRC);
      expect(result).to.have.property('exceptionIds').and.to.have.length(5);
      expect(result).to.have.property('report').and.to.have.length(13);
      const activeExceptionIds = result.report
        .filter((exception: string[]) => exception[1] === '\u001b[31mexpired\u001b[0m')
        .map((each: (string | number)[]) => Number(each[0]));
      expect(activeExceptionIds).to.have.length(6).to.deep.equal([975, 1084, 1179, 1556, 1651, 1654]);

      // Clean up
      dateStub.restore();
    });

    it('should be able to filter invalid exceptions and label correctly', () => {
      const result = processExceptions(NSPRC);
      expect(result).to.have.property('exceptionIds').and.to.have.length(5);
      expect(result).to.have.property('report');

      const activeExceptionIds = result.report
        .filter((exception: string[]) => exception[1] === '\u001b[31minvalid\u001b[0m')
        .map((each: (string | number)[]) => each[0]);
      expect(activeExceptionIds).to.have.length(1).to.deep.equal(['Note']);
    });
  });

  describe('#processAuditJson', () => {
    describe('npm v6', () => {
      it('should be able to handle correctly for empty vulnerability scan', () => {
        const jsonString = JSON.stringify(V6_JSON_BUFFER_EMPTY);
        const auditLevel = 'info';
        const result = processAuditJson(jsonString, auditLevel);

        expect(result).to.have.property('vulnerabilityIds');
        expect(result.vulnerabilityIds).to.have.length(0).and.to.deep.equal([]);
        expect(result).to.have.property('vulnerabilityModules');
        expect(result.vulnerabilityModules).to.have.length(0).and.to.deep.equal([]);
        expect(result).to.have.property('unhandledIds');
        expect(result.unhandledIds).to.have.length(0).and.to.deep.equal([]);
        expect(result).to.have.property('report');
        expect(result.report).to.have.length(0).and.to.deep.equal([]);
      });

      it('should be able to except some of the reported vulnerabilities', () => {
        const jsonString = JSON.stringify(V6_JSON_BUFFER);
        const auditLevel = 'info';

        expect(processAuditJson(jsonString, auditLevel))
          .to.have.property('unhandledIds')
          .and.to.have.length(11)
          .and.to.deep.equal([975, 976, 985, 1084, 1179, 1213, 1500, 1523, 1555, 1556, 1589]);

        expect(processAuditJson(jsonString, auditLevel, [975, 1179, 1589], ['dot-prop']))
          .to.have.property('unhandledIds')
          .and.to.have.length(7)
          .and.to.deep.equal([976, 985, 1084, 1500, 1523, 1555, 1556]);
      });

      it('should be able to list all the reported vulnerabilities', () => {
        const jsonString = JSON.stringify(V6_JSON_BUFFER);
        const auditLevel = 'info';
        const result = processAuditJson(jsonString, auditLevel);

        expect(result).to.have.property('vulnerabilityIds');
        expect(result.vulnerabilityIds)
          .to.have.length(11)
          .and.to.deep.equal([975, 976, 985, 1084, 1179, 1213, 1500, 1523, 1555, 1556, 1589]);
        expect(result).to.have.property('vulnerabilityModules');
        expect(result.vulnerabilityModules)
          .to.have.length(9)
          .and.to.deep.equal(['swagger-ui', 'mem', 'minimist', 'dot-prop', 'yargs-parser', 'lodash', 'bl', 'node-fetch', 'ini']);
      });

      it('should be able to generate a report of all the reported vulnerabilities', () => {
        const jsonString = JSON.stringify(V6_JSON_BUFFER);
        const auditLevel = 'info';
        const result = processAuditJson(jsonString, auditLevel);

        expect(result).to.have.property('report');
        expect(result.report).to.have.length(11).and.to.deep.equal(V6_SECURITY_REPORT_TABLE_DATA);
      });

      it('should be able to get info level vulnerabilities from JSON buffer', () => {
        const jsonString = JSON.stringify(V6_JSON_BUFFER);
        const auditLevel = 'info';
        const result = processAuditJson(jsonString, auditLevel);

        expect(result).to.have.property('vulnerabilityIds').and.to.have.length(11);
        expect(result).to.have.property('vulnerabilityModules').and.to.have.length(9);
        expect(result).to.have.property('report').and.to.have.length(11);

        expect(result).to.have.property('unhandledIds');
        expect(result.unhandledIds).to.have.length(11).and.to.deep.equal([975, 976, 985, 1084, 1179, 1213, 1500, 1523, 1555, 1556, 1589]);
      });

      it('should be able to get low level vulnerabilities from JSON buffer', () => {
        const jsonString = JSON.stringify(V6_JSON_BUFFER);
        const auditLevel = 'low';
        const result = processAuditJson(jsonString, auditLevel);

        expect(result).to.have.property('vulnerabilityIds').and.to.have.length(11);
        expect(result).to.have.property('vulnerabilityModules').and.to.have.length(9);
        expect(result).to.have.property('report').and.to.have.length(11);

        expect(result).to.have.property('unhandledIds');
        expect(result.unhandledIds).to.have.length(11).and.to.deep.equal([975, 976, 985, 1084, 1179, 1213, 1500, 1523, 1555, 1556, 1589]);
      });

      it('should be able to get moderate level vulnerabilities from JSON buffer', () => {
        const jsonString = JSON.stringify(V6_JSON_BUFFER);
        const auditLevel = 'moderate';
        const result = processAuditJson(jsonString, auditLevel);

        expect(result).to.have.property('vulnerabilityIds').and.to.have.length(11);
        expect(result).to.have.property('vulnerabilityModules').and.to.have.length(9);
        expect(result).to.have.property('report').and.to.have.length(11);

        expect(result).to.have.property('unhandledIds');
        expect(result.unhandledIds).to.have.length(5).and.to.deep.equal([975, 976, 985, 1213, 1555]);
      });

      it('should be able to get high level vulnerabilities from JSON buffer', () => {
        const jsonString = JSON.stringify(V6_JSON_BUFFER);
        const auditLevel = 'high';
        const result = processAuditJson(jsonString, auditLevel);

        expect(result).to.have.property('vulnerabilityIds').and.to.have.length(11);
        expect(result).to.have.property('vulnerabilityModules').and.to.have.length(9);
        expect(result).to.have.property('report').and.to.have.length(11);

        expect(result).to.have.property('unhandledIds');
        expect(result.unhandledIds).to.have.length(2).and.to.deep.equal([1213, 1555]);
      });

      it('should be able to get critical level vulnerabilities from JSON buffer', () => {
        const jsonString = JSON.stringify(V6_JSON_BUFFER);
        const auditLevel = 'critical';
        const result = processAuditJson(jsonString, auditLevel);

        expect(result).to.have.property('vulnerabilityIds').and.to.have.length(11);
        expect(result).to.have.property('vulnerabilityModules').and.to.have.length(9);
        expect(result).to.have.property('report').and.to.have.length(11);

        expect(result).to.have.property('unhandledIds');
        expect(result.unhandledIds).to.have.length(1).and.to.deep.equal([1555]);
      });
    });

    describe('npm v7', () => {
      it('should be able to handle correctly for empty vulnerability scan', () => {
        const jsonString = JSON.stringify(V7_JSON_BUFFER_EMPTY);
        const auditLevel = 'info';
        const result = processAuditJson(jsonString, auditLevel);

        expect(result).to.have.property('vulnerabilityIds');
        expect(result.vulnerabilityIds).to.have.length(0).and.to.deep.equal([]);
        expect(result).to.have.property('vulnerabilityModules');
        expect(result.vulnerabilityModules).to.have.length(0).and.to.deep.equal([]);
        expect(result).to.have.property('unhandledIds');
        expect(result.unhandledIds).to.have.length(0).and.to.deep.equal([]);
        expect(result).to.have.property('report');
        expect(result.report).to.have.length(0).and.to.deep.equal([]);
      });

      it('should be able to except some of the reported vulnerabilities', () => {
        const jsonString = JSON.stringify(V7_JSON_BUFFER);
        const auditLevel = 'info';

        expect(processAuditJson(jsonString, auditLevel))
          .to.have.property('unhandledIds')
          .and.to.have.length(11)
          .and.to.deep.equal([1555, 1213, 1589, 1523, 1084, 1179, 1556, 975, 976, 985, 1500]);

        expect(processAuditJson(jsonString, auditLevel, [975, 1179, 1589], ['dot-prop', 'yargs-parser']))
          .to.have.property('unhandledIds')
          .and.to.have.length(6)
          .and.to.deep.equal([1555, 1523, 1084, 1556, 976, 985]);
      });

      it('should be able to list all the reported vulnerabilities', () => {
        const jsonString = JSON.stringify(V7_JSON_BUFFER);
        const auditLevel = 'info';
        const result = processAuditJson(jsonString, auditLevel);

        expect(result).to.have.property('vulnerabilityIds');
        expect(result.vulnerabilityIds)
          .to.have.length(11)
          .and.to.deep.equal([1555, 1213, 1589, 1523, 1084, 1179, 1556, 975, 976, 985, 1500]);
        expect(result).to.have.property('vulnerabilityModules');
        expect(result.vulnerabilityModules)
          .to.have.length(9)
          .and.to.deep.equal(['bl', 'dot-prop', 'ini', 'lodash', 'mem', 'minimist', 'node-fetch', 'swagger-ui', 'yargs-parser']);
      });

      it('should be able to generate a report of all the reported vulnerabilities', () => {
        const jsonString = JSON.stringify(V7_JSON_BUFFER);
        const auditLevel = 'info';
        const result = processAuditJson(jsonString, auditLevel);

        expect(result).to.have.property('report');

        expect(result.report).to.have.length(11).and.to.deep.equal(V7_SECURITY_REPORT_TABLE_DATA);
      });

      it('should be able to get info level vulnerabilities from JSON buffer', () => {
        const jsonString = JSON.stringify(V7_JSON_BUFFER);
        const auditLevel = 'info';
        const result = processAuditJson(jsonString, auditLevel);

        expect(result).to.have.property('vulnerabilityIds').and.to.have.length(11);
        expect(result).to.have.property('vulnerabilityModules').and.to.have.length(9);
        expect(result).to.have.property('report').and.to.have.length(11);

        expect(result).to.have.property('unhandledIds');
        expect(result.unhandledIds).to.have.length(11).and.to.deep.equal([1555, 1213, 1589, 1523, 1084, 1179, 1556, 975, 976, 985, 1500]);
      });

      it('should be able to get low level vulnerabilities from JSON buffer', () => {
        const jsonString = JSON.stringify(V7_JSON_BUFFER);
        const auditLevel = 'low';
        const result = processAuditJson(jsonString, auditLevel);

        expect(result).to.have.property('vulnerabilityIds').and.to.have.length(11);
        expect(result).to.have.property('vulnerabilityModules').and.to.have.length(9);
        expect(result).to.have.property('report').and.to.have.length(11);

        expect(result).to.have.property('unhandledIds');
        expect(result.unhandledIds).to.have.length(11).and.to.deep.equal([1555, 1213, 1589, 1523, 1084, 1179, 1556, 975, 976, 985, 1500]);
      });

      it('should be able to get moderate level vulnerabilities from JSON buffer', () => {
        const jsonString = JSON.stringify(V7_JSON_BUFFER);
        const auditLevel = 'moderate';
        const result = processAuditJson(jsonString, auditLevel);

        expect(result).to.have.property('vulnerabilityIds').and.to.have.length(11);
        expect(result).to.have.property('vulnerabilityModules').and.to.have.length(9);
        expect(result).to.have.property('report').and.to.have.length(11);

        expect(result).to.have.property('unhandledIds');
        expect(result.unhandledIds).to.have.length(5).and.to.deep.equal([1555, 1213, 975, 976, 985]);
      });

      it('should be able to get high level vulnerabilities from JSON buffer', () => {
        const jsonString = JSON.stringify(V7_JSON_BUFFER);
        const auditLevel = 'high';
        const result = processAuditJson(jsonString, auditLevel);

        expect(result).to.have.property('vulnerabilityIds').and.to.have.length(11);
        expect(result).to.have.property('vulnerabilityModules').and.to.have.length(9);
        expect(result).to.have.property('report').and.to.have.length(11);

        expect(result).to.have.property('unhandledIds');
        expect(result.unhandledIds).to.have.length(2).and.to.deep.equal([1555, 1213]);
      });

      it('should be able to get critical level vulnerabilities from JSON buffer', () => {
        const jsonString = JSON.stringify(V7_JSON_BUFFER);
        const auditLevel = 'critical';
        const result = processAuditJson(jsonString, auditLevel);

        expect(result).to.have.property('vulnerabilityIds').and.to.have.length(11);
        expect(result).to.have.property('vulnerabilityModules').and.to.have.length(9);
        expect(result).to.have.property('report').and.to.have.length(11);

        expect(result).to.have.property('unhandledIds');
        expect(result.unhandledIds).to.have.length(1).and.to.deep.equal([1555]);
      });
    });
  });
});

export {};
